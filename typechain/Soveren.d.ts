/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SoverenInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "batchTransfer(address,uint256[],uint256[])": FunctionFragment;
    "burn(uint256,uint256)": FunctionFragment;
    "buy(address,uint256,uint256,address)": FunctionFragment;
    "c_0xf15ee5e9(bytes32)": FunctionFragment;
    "getOffer(address,uint256)": FunctionFragment;
    "getOfferedAmount(address,uint256)": FunctionFragment;
    "getPriceForAmount(address,uint256,uint256)": FunctionFragment;
    "getRating(uint256)": FunctionFragment;
    "getVotes(uint256,uint32,uint32)": FunctionFragment;
    "getVotesCount(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "makeOffer(uint256,uint256,uint256,uint8[],uint8,uint8)": FunctionFragment;
    "mint(uint256,uint256,string,string,bool)": FunctionFragment;
    "mintMore(uint256,uint256)": FunctionFragment;
    "payments(address)": FunctionFragment;
    "privateUri(uint256)": FunctionFragment;
    "removeOffer(uint256)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transfer(address,uint256,uint256)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "vote(uint256,uint8,string)": FunctionFragment;
    "withdrawPayments(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransfer",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "c_0xf15ee5e9",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOfferedAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceForAmount",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRating",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotesCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOffer",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BigNumberish, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "mintMore",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "payments", values: [string]): string;
  encodeFunctionData(
    functionFragment: "privateUri",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPayments",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "c_0xf15ee5e9",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOfferedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceForAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRating", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintMore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payments", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "privateUri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPayments",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
    "buySingle(address,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "buySingle"): EventFragment;
}

export class Soveren extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SoverenInterface;

  functions: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    batchTransfer(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "batchTransfer(address,uint256[],uint256[])"(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burn(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burn(uint256,uint256)"(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    buy(
      seller: string,
      id: BigNumberish,
      amount: BigNumberish,
      affiliate: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "buy(address,uint256,uint256,address)"(
      seller: string,
      id: BigNumberish,
      amount: BigNumberish,
      affiliate: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    c_0xf15ee5e9(
      c__0xf15ee5e9: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "c_0xf15ee5e9(bytes32)"(
      c__0xf15ee5e9: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    getOffer(
      seller: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        price: BigNumber;
        reserve: BigNumber;
        bulkDiscounts: number[];
        affiliateInterest: number;
        donation: number;
        0: BigNumber;
        1: BigNumber;
        2: number[];
        3: number;
        4: number;
      };
    }>;

    "getOffer(address,uint256)"(
      seller: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        price: BigNumber;
        reserve: BigNumber;
        bulkDiscounts: number[];
        affiliateInterest: number;
        donation: number;
        0: BigNumber;
        1: BigNumber;
        2: number[];
        3: number;
        4: number;
      };
    }>;

    getOfferedAmount(
      seller: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getOfferedAmount(address,uint256)"(
      seller: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getPriceForAmount(
      seller: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getPriceForAmount(address,uint256,uint256)"(
      seller: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getRating(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "getRating(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    getVotes(
      id: BigNumberish,
      skip: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { comment: string; rating: number; 0: string; 1: number }[];
    }>;

    "getVotes(uint256,uint32,uint32)"(
      id: BigNumberish,
      skip: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { comment: string; rating: number; 0: string; 1: number }[];
    }>;

    getVotesCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "getVotesCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    makeOffer(
      id: BigNumberish,
      price: BigNumberish,
      reserve: BigNumberish,
      bulkDiscounts: BigNumberish[],
      affiliateInterest: BigNumberish,
      donation: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "makeOffer(uint256,uint256,uint256,uint8[],uint8,uint8)"(
      id: BigNumberish,
      price: BigNumberish,
      reserve: BigNumberish,
      bulkDiscounts: BigNumberish[],
      affiliateInterest: BigNumberish,
      donation: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mint(
      id: BigNumberish,
      amount: BigNumberish,
      uri_: string,
      privateUri_: string,
      canMintMore: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(uint256,uint256,string,string,bool)"(
      id: BigNumberish,
      amount: BigNumberish,
      uri_: string,
      privateUri_: string,
      canMintMore: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintMore(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintMore(uint256,uint256)"(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    payments(
      dest: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "payments(address)"(
      dest: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    privateUri(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "privateUri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    removeOffer(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeOffer(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    transfer(
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256,uint256)"(
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    uri(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "uri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    vote(
      id: BigNumberish,
      rating: BigNumberish,
      comment: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "vote(uint256,uint8,string)"(
      id: BigNumberish,
      rating: BigNumberish,
      comment: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawPayments(
      payee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawPayments(address)"(
      payee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,uint256)"(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "balanceOfBatch(address[],uint256[])"(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  batchTransfer(
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "batchTransfer(address,uint256[],uint256[])"(
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burn(
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burn(uint256,uint256)"(
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  buy(
    seller: string,
    id: BigNumberish,
    amount: BigNumberish,
    affiliate: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "buy(address,uint256,uint256,address)"(
    seller: string,
    id: BigNumberish,
    amount: BigNumberish,
    affiliate: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  c_0xf15ee5e9(
    c__0xf15ee5e9: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  "c_0xf15ee5e9(bytes32)"(
    c__0xf15ee5e9: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  getOffer(
    seller: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    price: BigNumber;
    reserve: BigNumber;
    bulkDiscounts: number[];
    affiliateInterest: number;
    donation: number;
    0: BigNumber;
    1: BigNumber;
    2: number[];
    3: number;
    4: number;
  }>;

  "getOffer(address,uint256)"(
    seller: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    price: BigNumber;
    reserve: BigNumber;
    bulkDiscounts: number[];
    affiliateInterest: number;
    donation: number;
    0: BigNumber;
    1: BigNumber;
    2: number[];
    3: number;
    4: number;
  }>;

  getOfferedAmount(
    seller: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getOfferedAmount(address,uint256)"(
    seller: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceForAmount(
    seller: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPriceForAmount(address,uint256,uint256)"(
    seller: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRating(id: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "getRating(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getVotes(
    id: BigNumberish,
    skip: BigNumberish,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ comment: string; rating: number; 0: string; 1: number }[]>;

  "getVotes(uint256,uint32,uint32)"(
    id: BigNumberish,
    skip: BigNumberish,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ comment: string; rating: number; 0: string; 1: number }[]>;

  getVotesCount(id: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "getVotesCount(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  makeOffer(
    id: BigNumberish,
    price: BigNumberish,
    reserve: BigNumberish,
    bulkDiscounts: BigNumberish[],
    affiliateInterest: BigNumberish,
    donation: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "makeOffer(uint256,uint256,uint256,uint8[],uint8,uint8)"(
    id: BigNumberish,
    price: BigNumberish,
    reserve: BigNumberish,
    bulkDiscounts: BigNumberish[],
    affiliateInterest: BigNumberish,
    donation: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mint(
    id: BigNumberish,
    amount: BigNumberish,
    uri_: string,
    privateUri_: string,
    canMintMore: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(uint256,uint256,string,string,bool)"(
    id: BigNumberish,
    amount: BigNumberish,
    uri_: string,
    privateUri_: string,
    canMintMore: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintMore(
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintMore(uint256,uint256)"(
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  payments(dest: string, overrides?: CallOverrides): Promise<BigNumber>;

  "payments(address)"(
    dest: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  privateUri(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "privateUri(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  removeOffer(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeOffer(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,uint256,bytes)"(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transfer(
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256,uint256)"(
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  uri(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "uri(uint256)"(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  vote(
    id: BigNumberish,
    rating: BigNumberish,
    comment: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "vote(uint256,uint8,string)"(
    id: BigNumberish,
    rating: BigNumberish,
    comment: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawPayments(
    payee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawPayments(address)"(
    payee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    batchTransfer(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchTransfer(address,uint256[],uint256[])"(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    burn(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burn(uint256,uint256)"(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buy(
      seller: string,
      id: BigNumberish,
      amount: BigNumberish,
      affiliate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "buy(address,uint256,uint256,address)"(
      seller: string,
      id: BigNumberish,
      amount: BigNumberish,
      affiliate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    c_0xf15ee5e9(
      c__0xf15ee5e9: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "c_0xf15ee5e9(bytes32)"(
      c__0xf15ee5e9: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getOffer(
      seller: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      reserve: BigNumber;
      bulkDiscounts: number[];
      affiliateInterest: number;
      donation: number;
      0: BigNumber;
      1: BigNumber;
      2: number[];
      3: number;
      4: number;
    }>;

    "getOffer(address,uint256)"(
      seller: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      reserve: BigNumber;
      bulkDiscounts: number[];
      affiliateInterest: number;
      donation: number;
      0: BigNumber;
      1: BigNumber;
      2: number[];
      3: number;
      4: number;
    }>;

    getOfferedAmount(
      seller: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOfferedAmount(address,uint256)"(
      seller: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceForAmount(
      seller: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceForAmount(address,uint256,uint256)"(
      seller: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRating(id: BigNumberish, overrides?: CallOverrides): Promise<number>;

    "getRating(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getVotes(
      id: BigNumberish,
      skip: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ comment: string; rating: number; 0: string; 1: number }[]>;

    "getVotes(uint256,uint32,uint32)"(
      id: BigNumberish,
      skip: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ comment: string; rating: number; 0: string; 1: number }[]>;

    getVotesCount(id: BigNumberish, overrides?: CallOverrides): Promise<number>;

    "getVotesCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    makeOffer(
      id: BigNumberish,
      price: BigNumberish,
      reserve: BigNumberish,
      bulkDiscounts: BigNumberish[],
      affiliateInterest: BigNumberish,
      donation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "makeOffer(uint256,uint256,uint256,uint8[],uint8,uint8)"(
      id: BigNumberish,
      price: BigNumberish,
      reserve: BigNumberish,
      bulkDiscounts: BigNumberish[],
      affiliateInterest: BigNumberish,
      donation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      id: BigNumberish,
      amount: BigNumberish,
      uri_: string,
      privateUri_: string,
      canMintMore: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(uint256,uint256,string,string,bool)"(
      id: BigNumberish,
      amount: BigNumberish,
      uri_: string,
      privateUri_: string,
      canMintMore: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    mintMore(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintMore(uint256,uint256)"(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    payments(dest: string, overrides?: CallOverrides): Promise<BigNumber>;

    "payments(address)"(
      dest: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    privateUri(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "privateUri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    removeOffer(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "removeOffer(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transfer(
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transfer(address,uint256,uint256)"(
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "uri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    vote(
      id: BigNumberish,
      rating: BigNumberish,
      comment: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "vote(uint256,uint8,string)"(
      id: BigNumberish,
      rating: BigNumberish,
      comment: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPayments(payee: string, overrides?: CallOverrides): Promise<void>;

    "withdrawPayments(address)"(
      payee: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ApprovalForAll(
      account: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    TransferBatch(
      operator: string | null,
      from: string | null,
      to: string | null,
      ids: null,
      values: null
    ): EventFilter;

    TransferSingle(
      operator: string | null,
      from: string | null,
      to: string | null,
      id: null,
      value: null
    ): EventFilter;

    URI(value: null, id: BigNumberish | null): EventFilter;

    buySingle(
      seller: null,
      id: null,
      amount: null,
      affiliate: null
    ): EventFilter;
  };

  estimateGas: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchTransfer(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "batchTransfer(address,uint256[],uint256[])"(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    burn(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burn(uint256,uint256)"(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    buy(
      seller: string,
      id: BigNumberish,
      amount: BigNumberish,
      affiliate: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "buy(address,uint256,uint256,address)"(
      seller: string,
      id: BigNumberish,
      amount: BigNumberish,
      affiliate: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    c_0xf15ee5e9(
      c__0xf15ee5e9: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "c_0xf15ee5e9(bytes32)"(
      c__0xf15ee5e9: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOffer(
      seller: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOffer(address,uint256)"(
      seller: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOfferedAmount(
      seller: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOfferedAmount(address,uint256)"(
      seller: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceForAmount(
      seller: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceForAmount(address,uint256,uint256)"(
      seller: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRating(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getRating(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotes(
      id: BigNumberish,
      skip: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVotes(uint256,uint32,uint32)"(
      id: BigNumberish,
      skip: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotesCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVotesCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeOffer(
      id: BigNumberish,
      price: BigNumberish,
      reserve: BigNumberish,
      bulkDiscounts: BigNumberish[],
      affiliateInterest: BigNumberish,
      donation: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "makeOffer(uint256,uint256,uint256,uint8[],uint8,uint8)"(
      id: BigNumberish,
      price: BigNumberish,
      reserve: BigNumberish,
      bulkDiscounts: BigNumberish[],
      affiliateInterest: BigNumberish,
      donation: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mint(
      id: BigNumberish,
      amount: BigNumberish,
      uri_: string,
      privateUri_: string,
      canMintMore: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(uint256,uint256,string,string,bool)"(
      id: BigNumberish,
      amount: BigNumberish,
      uri_: string,
      privateUri_: string,
      canMintMore: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintMore(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintMore(uint256,uint256)"(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    payments(dest: string, overrides?: CallOverrides): Promise<BigNumber>;

    "payments(address)"(
      dest: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    privateUri(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "privateUri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeOffer(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "removeOffer(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256,uint256)"(
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    uri(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "uri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      id: BigNumberish,
      rating: BigNumberish,
      comment: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "vote(uint256,uint8,string)"(
      id: BigNumberish,
      rating: BigNumberish,
      comment: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawPayments(payee: string, overrides?: Overrides): Promise<BigNumber>;

    "withdrawPayments(address)"(
      payee: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchTransfer(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "batchTransfer(address,uint256[],uint256[])"(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burn(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(uint256,uint256)"(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    buy(
      seller: string,
      id: BigNumberish,
      amount: BigNumberish,
      affiliate: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "buy(address,uint256,uint256,address)"(
      seller: string,
      id: BigNumberish,
      amount: BigNumberish,
      affiliate: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    c_0xf15ee5e9(
      c__0xf15ee5e9: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "c_0xf15ee5e9(bytes32)"(
      c__0xf15ee5e9: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOffer(
      seller: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOffer(address,uint256)"(
      seller: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOfferedAmount(
      seller: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOfferedAmount(address,uint256)"(
      seller: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceForAmount(
      seller: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriceForAmount(address,uint256,uint256)"(
      seller: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRating(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRating(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotes(
      id: BigNumberish,
      skip: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVotes(uint256,uint32,uint32)"(
      id: BigNumberish,
      skip: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotesCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVotesCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeOffer(
      id: BigNumberish,
      price: BigNumberish,
      reserve: BigNumberish,
      bulkDiscounts: BigNumberish[],
      affiliateInterest: BigNumberish,
      donation: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "makeOffer(uint256,uint256,uint256,uint8[],uint8,uint8)"(
      id: BigNumberish,
      price: BigNumberish,
      reserve: BigNumberish,
      bulkDiscounts: BigNumberish[],
      affiliateInterest: BigNumberish,
      donation: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mint(
      id: BigNumberish,
      amount: BigNumberish,
      uri_: string,
      privateUri_: string,
      canMintMore: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(uint256,uint256,string,string,bool)"(
      id: BigNumberish,
      amount: BigNumberish,
      uri_: string,
      privateUri_: string,
      canMintMore: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintMore(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintMore(uint256,uint256)"(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    payments(
      dest: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "payments(address)"(
      dest: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    privateUri(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "privateUri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeOffer(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeOffer(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256,uint256)"(
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    uri(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      id: BigNumberish,
      rating: BigNumberish,
      comment: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "vote(uint256,uint8,string)"(
      id: BigNumberish,
      rating: BigNumberish,
      comment: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawPayments(
      payee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawPayments(address)"(
      payee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
