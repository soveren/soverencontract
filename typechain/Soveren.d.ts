/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SoverenInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "buy(address,uint256,address)": FunctionFragment;
    "getCreator(uint256)": FunctionFragment;
    "getProducts(address)": FunctionFragment;
    "getProfileUri(address)": FunctionFragment;
    "getPurchased()": FunctionFragment;
    "getRating(uint256)": FunctionFragment;
    "getVote(uint256)": FunctionFragment;
    "getVotes(uint256,uint32,uint32)": FunctionFragment;
    "getVotesCount(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mint(uint256,string,string,uint256,uint8,uint8)": FunctionFragment;
    "payments(address)": FunctionFragment;
    "privateUri(uint256)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setProfileUri(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateProduct(uint256,string,string,uint256,uint8,uint8)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "vote(uint256,uint8,string)": FunctionFragment;
    "withdrawPayments(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getProducts", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getProfileUri",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPurchased",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRating",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotesCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "payments", values: [string]): string;
  encodeFunctionData(
    functionFragment: "privateUri",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfileUri",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProduct",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPayments",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCreator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfileUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRating", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payments", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "privateUri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfileUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPayments",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Bought(address,uint256,uint256,address,uint256,uint256)": EventFragment;
    "NewProduct(uint256,string,uint256,uint8,uint8)": EventFragment;
    "NewRevision(uint256,string)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewProduct"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRevision"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export class Soveren extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SoverenInterface;

  functions: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    buy(
      seller: string,
      id: BigNumberish,
      affiliate: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "buy(address,uint256,address)"(
      seller: string,
      id: BigNumberish,
      affiliate: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getCreator(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getCreator(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getProducts(
      seller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "getProducts(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    getProfileUri(
      adr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getProfileUri(address)"(
      adr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getPurchased(overrides?: CallOverrides): Promise<{
      0: BigNumber[];
    }>;

    "getPurchased()"(overrides?: CallOverrides): Promise<{
      0: BigNumber[];
    }>;

    getRating(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "getRating(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    getVote(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        rating: number;
        revision: number;
        comment: string;
        0: number;
        1: number;
        2: string;
      };
    }>;

    "getVote(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        rating: number;
        revision: number;
        comment: string;
        0: number;
        1: number;
        2: string;
      };
    }>;

    getVotes(
      id: BigNumberish,
      skip: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        rating: number;
        revision: number;
        comment: string;
        0: number;
        1: number;
        2: string;
      }[];
    }>;

    "getVotes(uint256,uint32,uint32)"(
      id: BigNumberish,
      skip: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        rating: number;
        revision: number;
        comment: string;
        0: number;
        1: number;
        2: string;
      }[];
    }>;

    getVotesCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "getVotesCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    mint(
      id: BigNumberish,
      _uri: string,
      _privateUri: string,
      _price: BigNumberish,
      _affiliateInterest: BigNumberish,
      _donation: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(uint256,string,string,uint256,uint8,uint8)"(
      id: BigNumberish,
      _uri: string,
      _privateUri: string,
      _price: BigNumberish,
      _affiliateInterest: BigNumberish,
      _donation: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    payments(
      dest: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "payments(address)"(
      dest: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    privateUri(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "privateUri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setProfileUri(
      uri_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setProfileUri(string)"(
      uri_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    updateProduct(
      id: BigNumberish,
      _uri: string,
      _privateUri: string,
      _price: BigNumberish,
      _affiliateInterest: BigNumberish,
      _donation: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateProduct(uint256,string,string,uint256,uint8,uint8)"(
      id: BigNumberish,
      _uri: string,
      _privateUri: string,
      _price: BigNumberish,
      _affiliateInterest: BigNumberish,
      _donation: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    uri(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "uri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    vote(
      id: BigNumberish,
      rating: BigNumberish,
      comment: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "vote(uint256,uint8,string)"(
      id: BigNumberish,
      rating: BigNumberish,
      comment: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawPayments(
      payee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawPayments(address)"(
      payee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,uint256)"(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "balanceOfBatch(address[],uint256[])"(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  buy(
    seller: string,
    id: BigNumberish,
    affiliate: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "buy(address,uint256,address)"(
    seller: string,
    id: BigNumberish,
    affiliate: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getCreator(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getCreator(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getProducts(seller: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  "getProducts(address)"(
    seller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getProfileUri(adr: string, overrides?: CallOverrides): Promise<string>;

  "getProfileUri(address)"(
    adr: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPurchased(overrides?: CallOverrides): Promise<BigNumber[]>;

  "getPurchased()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  getRating(id: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "getRating(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getVote(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    rating: number;
    revision: number;
    comment: string;
    0: number;
    1: number;
    2: string;
  }>;

  "getVote(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    rating: number;
    revision: number;
    comment: string;
    0: number;
    1: number;
    2: string;
  }>;

  getVotes(
    id: BigNumberish,
    skip: BigNumberish,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      rating: number;
      revision: number;
      comment: string;
      0: number;
      1: number;
      2: string;
    }[]
  >;

  "getVotes(uint256,uint32,uint32)"(
    id: BigNumberish,
    skip: BigNumberish,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      rating: number;
      revision: number;
      comment: string;
      0: number;
      1: number;
      2: string;
    }[]
  >;

  getVotesCount(id: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "getVotesCount(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    id: BigNumberish,
    _uri: string,
    _privateUri: string,
    _price: BigNumberish,
    _affiliateInterest: BigNumberish,
    _donation: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(uint256,string,string,uint256,uint8,uint8)"(
    id: BigNumberish,
    _uri: string,
    _privateUri: string,
    _price: BigNumberish,
    _affiliateInterest: BigNumberish,
    _donation: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  payments(dest: string, overrides?: CallOverrides): Promise<BigNumber>;

  "payments(address)"(
    dest: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  privateUri(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "privateUri(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,uint256,bytes)"(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setProfileUri(
    uri_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setProfileUri(string)"(
    uri_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateProduct(
    id: BigNumberish,
    _uri: string,
    _privateUri: string,
    _price: BigNumberish,
    _affiliateInterest: BigNumberish,
    _donation: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateProduct(uint256,string,string,uint256,uint8,uint8)"(
    id: BigNumberish,
    _uri: string,
    _privateUri: string,
    _price: BigNumberish,
    _affiliateInterest: BigNumberish,
    _donation: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  uri(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "uri(uint256)"(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  vote(
    id: BigNumberish,
    rating: BigNumberish,
    comment: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "vote(uint256,uint8,string)"(
    id: BigNumberish,
    rating: BigNumberish,
    comment: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawPayments(
    payee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawPayments(address)"(
    payee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    buy(
      seller: string,
      id: BigNumberish,
      affiliate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "buy(address,uint256,address)"(
      seller: string,
      id: BigNumberish,
      affiliate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getCreator(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "getCreator(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getProducts(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getProducts(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getProfileUri(adr: string, overrides?: CallOverrides): Promise<string>;

    "getProfileUri(address)"(
      adr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPurchased(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getPurchased()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    getRating(id: BigNumberish, overrides?: CallOverrides): Promise<number>;

    "getRating(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getVote(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      rating: number;
      revision: number;
      comment: string;
      0: number;
      1: number;
      2: string;
    }>;

    "getVote(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      rating: number;
      revision: number;
      comment: string;
      0: number;
      1: number;
      2: string;
    }>;

    getVotes(
      id: BigNumberish,
      skip: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        rating: number;
        revision: number;
        comment: string;
        0: number;
        1: number;
        2: string;
      }[]
    >;

    "getVotes(uint256,uint32,uint32)"(
      id: BigNumberish,
      skip: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        rating: number;
        revision: number;
        comment: string;
        0: number;
        1: number;
        2: string;
      }[]
    >;

    getVotesCount(id: BigNumberish, overrides?: CallOverrides): Promise<number>;

    "getVotesCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      id: BigNumberish,
      _uri: string,
      _privateUri: string,
      _price: BigNumberish,
      _affiliateInterest: BigNumberish,
      _donation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(uint256,string,string,uint256,uint8,uint8)"(
      id: BigNumberish,
      _uri: string,
      _privateUri: string,
      _price: BigNumberish,
      _affiliateInterest: BigNumberish,
      _donation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    payments(dest: string, overrides?: CallOverrides): Promise<BigNumber>;

    "payments(address)"(
      dest: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    privateUri(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "privateUri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setProfileUri(uri_: string, overrides?: CallOverrides): Promise<void>;

    "setProfileUri(string)"(
      uri_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateProduct(
      id: BigNumberish,
      _uri: string,
      _privateUri: string,
      _price: BigNumberish,
      _affiliateInterest: BigNumberish,
      _donation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateProduct(uint256,string,string,uint256,uint8,uint8)"(
      id: BigNumberish,
      _uri: string,
      _privateUri: string,
      _price: BigNumberish,
      _affiliateInterest: BigNumberish,
      _donation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "uri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    vote(
      id: BigNumberish,
      rating: BigNumberish,
      comment: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "vote(uint256,uint8,string)"(
      id: BigNumberish,
      rating: BigNumberish,
      comment: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPayments(payee: string, overrides?: CallOverrides): Promise<void>;

    "withdrawPayments(address)"(
      payee: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ApprovalForAll(
      account: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    Bought(
      seller: null,
      id: null,
      price: null,
      affiliate: null,
      affiliateProfit: null,
      donationProfit: null
    ): EventFilter;

    NewProduct(
      id: null,
      uri: null,
      price: null,
      affiliateInterest: null,
      donation: null
    ): EventFilter;

    NewRevision(id: null, uri: null): EventFilter;

    TransferBatch(
      operator: string | null,
      from: string | null,
      to: string | null,
      ids: null,
      values: null
    ): EventFilter;

    TransferSingle(
      operator: string | null,
      from: string | null,
      to: string | null,
      id: null,
      value: null
    ): EventFilter;

    URI(value: null, id: BigNumberish | null): EventFilter;
  };

  estimateGas: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(
      seller: string,
      id: BigNumberish,
      affiliate: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "buy(address,uint256,address)"(
      seller: string,
      id: BigNumberish,
      affiliate: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getCreator(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getCreator(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProducts(seller: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getProducts(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProfileUri(adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getProfileUri(address)"(
      adr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPurchased(overrides?: CallOverrides): Promise<BigNumber>;

    "getPurchased()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRating(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getRating(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVote(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getVote(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotes(
      id: BigNumberish,
      skip: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVotes(uint256,uint32,uint32)"(
      id: BigNumberish,
      skip: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotesCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVotesCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      id: BigNumberish,
      _uri: string,
      _privateUri: string,
      _price: BigNumberish,
      _affiliateInterest: BigNumberish,
      _donation: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(uint256,string,string,uint256,uint8,uint8)"(
      id: BigNumberish,
      _uri: string,
      _privateUri: string,
      _price: BigNumberish,
      _affiliateInterest: BigNumberish,
      _donation: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    payments(dest: string, overrides?: CallOverrides): Promise<BigNumber>;

    "payments(address)"(
      dest: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    privateUri(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "privateUri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setProfileUri(uri_: string, overrides?: Overrides): Promise<BigNumber>;

    "setProfileUri(string)"(
      uri_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateProduct(
      id: BigNumberish,
      _uri: string,
      _privateUri: string,
      _price: BigNumberish,
      _affiliateInterest: BigNumberish,
      _donation: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateProduct(uint256,string,string,uint256,uint8,uint8)"(
      id: BigNumberish,
      _uri: string,
      _privateUri: string,
      _price: BigNumberish,
      _affiliateInterest: BigNumberish,
      _donation: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    uri(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "uri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      id: BigNumberish,
      rating: BigNumberish,
      comment: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "vote(uint256,uint8,string)"(
      id: BigNumberish,
      rating: BigNumberish,
      comment: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawPayments(payee: string, overrides?: Overrides): Promise<BigNumber>;

    "withdrawPayments(address)"(
      payee: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      seller: string,
      id: BigNumberish,
      affiliate: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "buy(address,uint256,address)"(
      seller: string,
      id: BigNumberish,
      affiliate: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getCreator(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreator(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProducts(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProducts(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProfileUri(
      adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProfileUri(address)"(
      adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPurchased(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPurchased()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRating(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRating(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVote(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVote(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotes(
      id: BigNumberish,
      skip: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVotes(uint256,uint32,uint32)"(
      id: BigNumberish,
      skip: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotesCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVotesCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      id: BigNumberish,
      _uri: string,
      _privateUri: string,
      _price: BigNumberish,
      _affiliateInterest: BigNumberish,
      _donation: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(uint256,string,string,uint256,uint8,uint8)"(
      id: BigNumberish,
      _uri: string,
      _privateUri: string,
      _price: BigNumberish,
      _affiliateInterest: BigNumberish,
      _donation: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    payments(
      dest: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "payments(address)"(
      dest: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    privateUri(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "privateUri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setProfileUri(
      uri_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setProfileUri(string)"(
      uri_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateProduct(
      id: BigNumberish,
      _uri: string,
      _privateUri: string,
      _price: BigNumberish,
      _affiliateInterest: BigNumberish,
      _donation: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateProduct(uint256,string,string,uint256,uint8,uint8)"(
      id: BigNumberish,
      _uri: string,
      _privateUri: string,
      _price: BigNumberish,
      _affiliateInterest: BigNumberish,
      _donation: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    uri(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      id: BigNumberish,
      rating: BigNumberish,
      comment: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "vote(uint256,uint8,string)"(
      id: BigNumberish,
      rating: BigNumberish,
      comment: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawPayments(
      payee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawPayments(address)"(
      payee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
